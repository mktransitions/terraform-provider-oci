package mocks

import baremetal "github.com/MustWin/baremetal-sdk-go"

import mock "github.com/stretchr/testify/mock"

// BareMetalClient is an autogenerated mock type for the BareMetalClient type
type BareMetalClient struct {
	mock.Mock
}

// AddUserToGroup provides a mock function with given fields: userID, groupID, opts
func (_m *BareMetalClient) AddUserToGroup(userID string, groupID string, opts *baremetal.RetryTokenOptions) (*baremetal.UserGroupMembership, error) {
	ret := _m.Called(userID, groupID, opts)

	var r0 *baremetal.UserGroupMembership
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.RetryTokenOptions) *baremetal.UserGroupMembership); ok {
		r0 = rf(userID, groupID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.UserGroupMembership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.RetryTokenOptions) error); ok {
		r1 = rf(userID, groupID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachVolume provides a mock function with given fields: attachmentType, instanceID, volumeID, opts
func (_m *BareMetalClient) AttachVolume(attachmentType string, instanceID string, volumeID string, opts *baremetal.CreateOptions) (*baremetal.VolumeAttachment, error) {
	ret := _m.Called(attachmentType, instanceID, volumeID, opts)

	var r0 *baremetal.VolumeAttachment
	if rf, ok := ret.Get(0).(func(string, string, string, *baremetal.CreateOptions) *baremetal.VolumeAttachment); ok {
		r0 = rf(attachmentType, instanceID, volumeID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, *baremetal.CreateOptions) error); ok {
		r1 = rf(attachmentType, instanceID, volumeID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CaptureConsoleHistory provides a mock function with given fields: instanceID, opts
func (_m *BareMetalClient) CaptureConsoleHistory(instanceID string, opts *baremetal.RetryTokenOptions) (*baremetal.ConsoleHistoryMetadata, error) {
	ret := _m.Called(instanceID, opts)

	var r0 *baremetal.ConsoleHistoryMetadata
	if rf, ok := ret.Get(0).(func(string, *baremetal.RetryTokenOptions) *baremetal.ConsoleHistoryMetadata); ok {
		r0 = rf(instanceID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ConsoleHistoryMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.RetryTokenOptions) error); ok {
		r1 = rf(instanceID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucket provides a mock function with given fields: compartmentID, name, namespaceName, opts
func (_m *BareMetalClient) CreateBucket(compartmentID string, name string, namespaceName baremetal.Namespace, opts *baremetal.CreateBucketOptions) (*baremetal.Bucket, error) {
	ret := _m.Called(compartmentID, name, namespaceName, opts)

	var r0 *baremetal.Bucket
	if rf, ok := ret.Get(0).(func(string, string, baremetal.Namespace, *baremetal.CreateBucketOptions) *baremetal.Bucket); ok {
		r0 = rf(compartmentID, name, namespaceName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, baremetal.Namespace, *baremetal.CreateBucketOptions) error); ok {
		r1 = rf(compartmentID, name, namespaceName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCompartment provides a mock function with given fields: name, desc, opts
func (_m *BareMetalClient) CreateCompartment(name string, desc string, opts *baremetal.RetryTokenOptions) (*baremetal.Compartment, error) {
	ret := _m.Called(name, desc, opts)

	var r0 *baremetal.Compartment
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.RetryTokenOptions) *baremetal.Compartment); ok {
		r0 = rf(name, desc, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Compartment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.RetryTokenOptions) error); ok {
		r1 = rf(name, desc, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCpe provides a mock function with given fields: compartmentID, ipAddress, opts
func (_m *BareMetalClient) CreateCpe(compartmentID string, ipAddress string, opts *baremetal.CreateOptions) (*baremetal.Cpe, error) {
	ret := _m.Called(compartmentID, ipAddress, opts)

	var r0 *baremetal.Cpe
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.CreateOptions) *baremetal.Cpe); ok {
		r0 = rf(compartmentID, ipAddress, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Cpe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.CreateOptions) error); ok {
		r1 = rf(compartmentID, ipAddress, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDHCPOptions provides a mock function with given fields: compartmentID, vcnID, dhcpOptions, opts
func (_m *BareMetalClient) CreateDHCPOptions(compartmentID string, vcnID string, dhcpOptions []baremetal.DHCPDNSOption, opts *baremetal.CreateOptions) (*baremetal.DHCPOptions, error) {
	ret := _m.Called(compartmentID, vcnID, dhcpOptions, opts)

	var r0 *baremetal.DHCPOptions
	if rf, ok := ret.Get(0).(func(string, string, []baremetal.DHCPDNSOption, *baremetal.CreateOptions) *baremetal.DHCPOptions); ok {
		r0 = rf(compartmentID, vcnID, dhcpOptions, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DHCPOptions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []baremetal.DHCPDNSOption, *baremetal.CreateOptions) error); ok {
		r1 = rf(compartmentID, vcnID, dhcpOptions, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDrg provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) CreateDrg(compartmentID string, opts *baremetal.CreateOptions) (*baremetal.Drg, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.Drg
	if rf, ok := ret.Get(0).(func(string, *baremetal.CreateOptions) *baremetal.Drg); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Drg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.CreateOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDrgAttachment provides a mock function with given fields: drgID, vcnID, opts
func (_m *BareMetalClient) CreateDrgAttachment(drgID string, vcnID string, opts *baremetal.CreateOptions) (*baremetal.DrgAttachment, error) {
	ret := _m.Called(drgID, vcnID, opts)

	var r0 *baremetal.DrgAttachment
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.CreateOptions) *baremetal.DrgAttachment); ok {
		r0 = rf(drgID, vcnID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DrgAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.CreateOptions) error); ok {
		r1 = rf(drgID, vcnID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: name, desc, opts
func (_m *BareMetalClient) CreateGroup(name string, desc string, opts *baremetal.RetryTokenOptions) (*baremetal.Group, error) {
	ret := _m.Called(name, desc, opts)

	var r0 *baremetal.Group
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.RetryTokenOptions) *baremetal.Group); ok {
		r0 = rf(name, desc, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.RetryTokenOptions) error); ok {
		r1 = rf(name, desc, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIPSecConnection provides a mock function with given fields: compartmentID, cpeID, drgID, staticRoutes, opts
func (_m *BareMetalClient) CreateIPSecConnection(compartmentID string, cpeID string, drgID string, staticRoutes []string, opts *baremetal.CreateOptions) (*baremetal.IPSecConnection, error) {
	ret := _m.Called(compartmentID, cpeID, drgID, staticRoutes, opts)

	var r0 *baremetal.IPSecConnection
	if rf, ok := ret.Get(0).(func(string, string, string, []string, *baremetal.CreateOptions) *baremetal.IPSecConnection); ok {
		r0 = rf(compartmentID, cpeID, drgID, staticRoutes, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IPSecConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []string, *baremetal.CreateOptions) error); ok {
		r1 = rf(compartmentID, cpeID, drgID, staticRoutes, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImage provides a mock function with given fields: compartmentID, instanceID, opts
func (_m *BareMetalClient) CreateImage(compartmentID string, instanceID string, opts *baremetal.CreateOptions) (*baremetal.Image, error) {
	ret := _m.Called(compartmentID, instanceID, opts)

	var r0 *baremetal.Image
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.CreateOptions) *baremetal.Image); ok {
		r0 = rf(compartmentID, instanceID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.CreateOptions) error); ok {
		r1 = rf(compartmentID, instanceID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInternetGateway provides a mock function with given fields: compartmentID, vcnID, isEnabled, opts
func (_m *BareMetalClient) CreateInternetGateway(compartmentID string, vcnID string, isEnabled bool, opts *baremetal.CreateOptions) (*baremetal.InternetGateway, error) {
	ret := _m.Called(compartmentID, vcnID, isEnabled, opts)

	var r0 *baremetal.InternetGateway
	if rf, ok := ret.Get(0).(func(string, string, bool, *baremetal.CreateOptions) *baremetal.InternetGateway); ok {
		r0 = rf(compartmentID, vcnID, isEnabled, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.InternetGateway)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool, *baremetal.CreateOptions) error); ok {
		r1 = rf(compartmentID, vcnID, isEnabled, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrResetUIPassword provides a mock function with given fields: userID, opts
func (_m *BareMetalClient) CreateOrResetUIPassword(userID string, opts *baremetal.RetryTokenOptions) (*baremetal.UIPassword, error) {
	ret := _m.Called(userID, opts)

	var r0 *baremetal.UIPassword
	if rf, ok := ret.Get(0).(func(string, *baremetal.RetryTokenOptions) *baremetal.UIPassword); ok {
		r0 = rf(userID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.UIPassword)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.RetryTokenOptions) error); ok {
		r1 = rf(userID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicy provides a mock function with given fields: name, desc, compartmentID, statements, opts
func (_m *BareMetalClient) CreatePolicy(name string, desc string, compartmentID string, statements []string, opts *baremetal.CreatePolicyOptions) (*baremetal.Policy, error) {
	ret := _m.Called(name, desc, compartmentID, statements, opts)

	var r0 *baremetal.Policy
	if rf, ok := ret.Get(0).(func(string, string, string, []string, *baremetal.CreatePolicyOptions) *baremetal.Policy); ok {
		r0 = rf(name, desc, compartmentID, statements, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []string, *baremetal.CreatePolicyOptions) error); ok {
		r1 = rf(name, desc, compartmentID, statements, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRouteTable provides a mock function with given fields: compartmentID, vcnID, routeRules, opts
func (_m *BareMetalClient) CreateRouteTable(compartmentID string, vcnID string, routeRules []baremetal.RouteRule, opts *baremetal.CreateOptions) (*baremetal.RouteTable, error) {
	ret := _m.Called(compartmentID, vcnID, routeRules, opts)

	var r0 *baremetal.RouteTable
	if rf, ok := ret.Get(0).(func(string, string, []baremetal.RouteRule, *baremetal.CreateOptions) *baremetal.RouteTable); ok {
		r0 = rf(compartmentID, vcnID, routeRules, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.RouteTable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []baremetal.RouteRule, *baremetal.CreateOptions) error); ok {
		r1 = rf(compartmentID, vcnID, routeRules, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecurityList provides a mock function with given fields: compartmentID, vcnID, egressRules, ingressRules, opts
func (_m *BareMetalClient) CreateSecurityList(compartmentID string, vcnID string, egressRules []baremetal.EgressSecurityRule, ingressRules []baremetal.IngressSecurityRule, opts *baremetal.CreateOptions) (*baremetal.SecurityList, error) {
	ret := _m.Called(compartmentID, vcnID, egressRules, ingressRules, opts)

	var r0 *baremetal.SecurityList
	if rf, ok := ret.Get(0).(func(string, string, []baremetal.EgressSecurityRule, []baremetal.IngressSecurityRule, *baremetal.CreateOptions) *baremetal.SecurityList); ok {
		r0 = rf(compartmentID, vcnID, egressRules, ingressRules, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.SecurityList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []baremetal.EgressSecurityRule, []baremetal.IngressSecurityRule, *baremetal.CreateOptions) error); ok {
		r1 = rf(compartmentID, vcnID, egressRules, ingressRules, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubnet provides a mock function with given fields: availabilityDomain, cidrBlock, compartmentID, vcnID, opts
func (_m *BareMetalClient) CreateSubnet(availabilityDomain string, cidrBlock string, compartmentID string, vcnID string, opts *baremetal.CreateSubnetOptions) (*baremetal.Subnet, error) {
	ret := _m.Called(availabilityDomain, cidrBlock, compartmentID, vcnID, opts)

	var r0 *baremetal.Subnet
	if rf, ok := ret.Get(0).(func(string, string, string, string, *baremetal.CreateSubnetOptions) *baremetal.Subnet); ok {
		r0 = rf(availabilityDomain, cidrBlock, compartmentID, vcnID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Subnet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, *baremetal.CreateSubnetOptions) error); ok {
		r1 = rf(availabilityDomain, cidrBlock, compartmentID, vcnID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSwiftPassword provides a mock function with given fields: userID, desc, opts
func (_m *BareMetalClient) CreateSwiftPassword(userID string, desc string, opts *baremetal.RetryTokenOptions) (*baremetal.SwiftPassword, error) {
	ret := _m.Called(userID, desc, opts)

	var r0 *baremetal.SwiftPassword
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.RetryTokenOptions) *baremetal.SwiftPassword); ok {
		r0 = rf(userID, desc, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.SwiftPassword)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.RetryTokenOptions) error); ok {
		r1 = rf(userID, desc, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: name, desc, opts
func (_m *BareMetalClient) CreateUser(name string, desc string, opts *baremetal.RetryTokenOptions) (*baremetal.User, error) {
	ret := _m.Called(name, desc, opts)

	var r0 *baremetal.User
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.RetryTokenOptions) *baremetal.User); ok {
		r0 = rf(name, desc, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.RetryTokenOptions) error); ok {
		r1 = rf(name, desc, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualNetwork provides a mock function with given fields: cidrBlock, compartmentID, opts
func (_m *BareMetalClient) CreateVirtualNetwork(cidrBlock string, compartmentID string, opts *baremetal.CreateVcnOptions) (*baremetal.VirtualNetwork, error) {
	ret := _m.Called(cidrBlock, compartmentID, opts)

	var r0 *baremetal.VirtualNetwork
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.CreateVcnOptions) *baremetal.VirtualNetwork); ok {
		r0 = rf(cidrBlock, compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VirtualNetwork)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.CreateVcnOptions) error); ok {
		r1 = rf(cidrBlock, compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolume provides a mock function with given fields: availabilityDomain, compartmentID, opts
func (_m *BareMetalClient) CreateVolume(availabilityDomain string, compartmentID string, opts *baremetal.CreateVolumeOptions) (*baremetal.Volume, error) {
	ret := _m.Called(availabilityDomain, compartmentID, opts)

	var r0 *baremetal.Volume
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.CreateVolumeOptions) *baremetal.Volume); ok {
		r0 = rf(availabilityDomain, compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.CreateVolumeOptions) error); ok {
		r1 = rf(availabilityDomain, compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolumeBackup provides a mock function with given fields: volumeID, opts
func (_m *BareMetalClient) CreateVolumeBackup(volumeID string, opts *baremetal.CreateOptions) (*baremetal.VolumeBackup, error) {
	ret := _m.Called(volumeID, opts)

	var r0 *baremetal.VolumeBackup
	if rf, ok := ret.Get(0).(func(string, *baremetal.CreateOptions) *baremetal.VolumeBackup); ok {
		r0 = rf(volumeID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeBackup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.CreateOptions) error); ok {
		r1 = rf(volumeID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAPIKey provides a mock function with given fields: userID, fingerprint, opts
func (_m *BareMetalClient) DeleteAPIKey(userID string, fingerprint string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(userID, fingerprint, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(userID, fingerprint, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBucket provides a mock function with given fields: name, namespaceName, opts
func (_m *BareMetalClient) DeleteBucket(name string, namespaceName baremetal.Namespace, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(name, namespaceName, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, baremetal.Namespace, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(name, namespaceName, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCpe provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteCpe(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDHCPOptions provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteDHCPOptions(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDrg provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteDrg(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDrgAttachment provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteDrgAttachment(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroup provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteGroup(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIPSecConnection provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteIPSecConnection(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteImage provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteImage(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteInternetGateway provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteInternetGateway(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteObject provides a mock function with given fields: namespace, bucketName, objectName, opts
func (_m *BareMetalClient) DeleteObject(namespace baremetal.Namespace, bucketName string, objectName string, opts *baremetal.DeleteObjectOptions) (*baremetal.DeleteObject, error) {
	ret := _m.Called(namespace, bucketName, objectName, opts)

	var r0 *baremetal.DeleteObject
	if rf, ok := ret.Get(0).(func(baremetal.Namespace, string, string, *baremetal.DeleteObjectOptions) *baremetal.DeleteObject); ok {
		r0 = rf(namespace, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DeleteObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(baremetal.Namespace, string, string, *baremetal.DeleteObjectOptions) error); ok {
		r1 = rf(namespace, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeletePolicy(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRouteTable provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteRouteTable(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSecurityList provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteSecurityList(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSubnet provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteSubnet(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSwiftPassword provides a mock function with given fields: id, userID, opts
func (_m *BareMetalClient) DeleteSwiftPassword(id string, userID string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, userID, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, userID, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteUser(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserGroupMembership provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteUserGroupMembership(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVirtualNetwork provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteVirtualNetwork(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVolume provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteVolume(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVolumeBackup provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DeleteVolumeBackup(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DetachVolume provides a mock function with given fields: id, opts
func (_m *BareMetalClient) DetachVolume(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBucket provides a mock function with given fields: bucketName, namespaceName
func (_m *BareMetalClient) GetBucket(bucketName string, namespaceName baremetal.Namespace) (*baremetal.Bucket, error) {
	ret := _m.Called(bucketName, namespaceName)

	var r0 *baremetal.Bucket
	if rf, ok := ret.Get(0).(func(string, baremetal.Namespace) *baremetal.Bucket); ok {
		r0 = rf(bucketName, namespaceName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, baremetal.Namespace) error); ok {
		r1 = rf(bucketName, namespaceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCompartment provides a mock function with given fields: id
func (_m *BareMetalClient) GetCompartment(id string) (*baremetal.Compartment, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Compartment
	if rf, ok := ret.Get(0).(func(string) *baremetal.Compartment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Compartment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsoleHistory provides a mock function with given fields: instanceID
func (_m *BareMetalClient) GetConsoleHistory(instanceID string) (*baremetal.ConsoleHistoryMetadata, error) {
	ret := _m.Called(instanceID)

	var r0 *baremetal.ConsoleHistoryMetadata
	if rf, ok := ret.Get(0).(func(string) *baremetal.ConsoleHistoryMetadata); ok {
		r0 = rf(instanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ConsoleHistoryMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(instanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCpe provides a mock function with given fields: id
func (_m *BareMetalClient) GetCpe(id string) (*baremetal.Cpe, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Cpe
	if rf, ok := ret.Get(0).(func(string) *baremetal.Cpe); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Cpe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBHome provides a mock function with given fields: id
func (_m *BareMetalClient) GetDBHome(id string) (*baremetal.DBHome, error) {
	ret := _m.Called(id)

	var r0 *baremetal.DBHome
	if rf, ok := ret.Get(0).(func(string) *baremetal.DBHome); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DBHome)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBNode provides a mock function with given fields: id
func (_m *BareMetalClient) GetDBNode(id string) (*baremetal.DBNode, error) {
	ret := _m.Called(id)

	var r0 *baremetal.DBNode
	if rf, ok := ret.Get(0).(func(string) *baremetal.DBNode); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DBNode)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBSystem provides a mock function with given fields: id
func (_m *BareMetalClient) GetDBSystem(id string) (*baremetal.DBSystem, error) {
	ret := _m.Called(id)

	var r0 *baremetal.DBSystem
	if rf, ok := ret.Get(0).(func(string) *baremetal.DBSystem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DBSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDHCPOptions provides a mock function with given fields: id
func (_m *BareMetalClient) GetDHCPOptions(id string) (*baremetal.DHCPOptions, error) {
	ret := _m.Called(id)

	var r0 *baremetal.DHCPOptions
	if rf, ok := ret.Get(0).(func(string) *baremetal.DHCPOptions); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DHCPOptions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabase provides a mock function with given fields: id
func (_m *BareMetalClient) GetDatabase(id string) (*baremetal.Database, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Database
	if rf, ok := ret.Get(0).(func(string) *baremetal.Database); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Database)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDrg provides a mock function with given fields: id
func (_m *BareMetalClient) GetDrg(id string) (*baremetal.Drg, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Drg
	if rf, ok := ret.Get(0).(func(string) *baremetal.Drg); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Drg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDrgAttachment provides a mock function with given fields: id
func (_m *BareMetalClient) GetDrgAttachment(id string) (*baremetal.DrgAttachment, error) {
	ret := _m.Called(id)

	var r0 *baremetal.DrgAttachment
	if rf, ok := ret.Get(0).(func(string) *baremetal.DrgAttachment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DrgAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: id
func (_m *BareMetalClient) GetGroup(id string) (*baremetal.Group, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Group
	if rf, ok := ret.Get(0).(func(string) *baremetal.Group); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSecConnection provides a mock function with given fields: id
func (_m *BareMetalClient) GetIPSecConnection(id string) (*baremetal.IPSecConnection, error) {
	ret := _m.Called(id)

	var r0 *baremetal.IPSecConnection
	if rf, ok := ret.Get(0).(func(string) *baremetal.IPSecConnection); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IPSecConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSecConnectionDeviceConfig provides a mock function with given fields: id
func (_m *BareMetalClient) GetIPSecConnectionDeviceConfig(id string) (*baremetal.IPSecConnectionDeviceConfig, error) {
	ret := _m.Called(id)

	var r0 *baremetal.IPSecConnectionDeviceConfig
	if rf, ok := ret.Get(0).(func(string) *baremetal.IPSecConnectionDeviceConfig); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IPSecConnectionDeviceConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSecConnectionDeviceStatus provides a mock function with given fields: id
func (_m *BareMetalClient) GetIPSecConnectionDeviceStatus(id string) (*baremetal.IPSecConnectionDeviceStatus, error) {
	ret := _m.Called(id)

	var r0 *baremetal.IPSecConnectionDeviceStatus
	if rf, ok := ret.Get(0).(func(string) *baremetal.IPSecConnectionDeviceStatus); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IPSecConnectionDeviceStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImage provides a mock function with given fields: id
func (_m *BareMetalClient) GetImage(id string) (*baremetal.Image, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Image
	if rf, ok := ret.Get(0).(func(string) *baremetal.Image); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: id
func (_m *BareMetalClient) GetInstance(id string) (*baremetal.Instance, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Instance
	if rf, ok := ret.Get(0).(func(string) *baremetal.Instance); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInternetGateway provides a mock function with given fields: id
func (_m *BareMetalClient) GetInternetGateway(id string) (*baremetal.InternetGateway, error) {
	ret := _m.Called(id)

	var r0 *baremetal.InternetGateway
	if rf, ok := ret.Get(0).(func(string) *baremetal.InternetGateway); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.InternetGateway)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields:
func (_m *BareMetalClient) GetNamespace() (*baremetal.Namespace, error) {
	ret := _m.Called()

	var r0 *baremetal.Namespace
	if rf, ok := ret.Get(0).(func() *baremetal.Namespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObject provides a mock function with given fields: namespace, bucketName, objectName, opts
func (_m *BareMetalClient) GetObject(namespace baremetal.Namespace, bucketName string, objectName string, opts *baremetal.GetObjectOptions) (*baremetal.Object, error) {
	ret := _m.Called(namespace, bucketName, objectName, opts)

	var r0 *baremetal.Object
	if rf, ok := ret.Get(0).(func(baremetal.Namespace, string, string, *baremetal.GetObjectOptions) *baremetal.Object); ok {
		r0 = rf(namespace, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(baremetal.Namespace, string, string, *baremetal.GetObjectOptions) error); ok {
		r1 = rf(namespace, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: id
func (_m *BareMetalClient) GetPolicy(id string) (*baremetal.Policy, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Policy
	if rf, ok := ret.Get(0).(func(string) *baremetal.Policy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteTable provides a mock function with given fields: id
func (_m *BareMetalClient) GetRouteTable(id string) (*baremetal.RouteTable, error) {
	ret := _m.Called(id)

	var r0 *baremetal.RouteTable
	if rf, ok := ret.Get(0).(func(string) *baremetal.RouteTable); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.RouteTable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecurityList provides a mock function with given fields: id
func (_m *BareMetalClient) GetSecurityList(id string) (*baremetal.SecurityList, error) {
	ret := _m.Called(id)

	var r0 *baremetal.SecurityList
	if rf, ok := ret.Get(0).(func(string) *baremetal.SecurityList); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.SecurityList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubnet provides a mock function with given fields: id
func (_m *BareMetalClient) GetSubnet(id string) (*baremetal.Subnet, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Subnet
	if rf, ok := ret.Get(0).(func(string) *baremetal.Subnet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Subnet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id
func (_m *BareMetalClient) GetUser(id string) (*baremetal.User, error) {
	ret := _m.Called(id)

	var r0 *baremetal.User
	if rf, ok := ret.Get(0).(func(string) *baremetal.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroupMembership provides a mock function with given fields: id
func (_m *BareMetalClient) GetUserGroupMembership(id string) (*baremetal.UserGroupMembership, error) {
	ret := _m.Called(id)

	var r0 *baremetal.UserGroupMembership
	if rf, ok := ret.Get(0).(func(string) *baremetal.UserGroupMembership); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.UserGroupMembership)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVirtualNetwork provides a mock function with given fields: id
func (_m *BareMetalClient) GetVirtualNetwork(id string) (*baremetal.VirtualNetwork, error) {
	ret := _m.Called(id)

	var r0 *baremetal.VirtualNetwork
	if rf, ok := ret.Get(0).(func(string) *baremetal.VirtualNetwork); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VirtualNetwork)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVnic provides a mock function with given fields: id
func (_m *BareMetalClient) GetVnic(id string) (*baremetal.Vnic, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Vnic
	if rf, ok := ret.Get(0).(func(string) *baremetal.Vnic); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Vnic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWindowsInstanceInitialCredentials provides a mock function with given fields: id
func (_m *BareMetalClient) GetWindowsInstanceInitialCredentials(id string) (*baremetal.InstanceCredentials, error) {
	ret := _m.Called(id)

	var r0 *baremetal.InstanceCredentials
	if rf, ok := ret.Get(0).(func(string) *baremetal.InstanceCredentials); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.InstanceCredentials)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolume provides a mock function with given fields: id
func (_m *BareMetalClient) GetVolume(id string) (*baremetal.Volume, error) {
	ret := _m.Called(id)

	var r0 *baremetal.Volume
	if rf, ok := ret.Get(0).(func(string) *baremetal.Volume); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeAttachment provides a mock function with given fields: id
func (_m *BareMetalClient) GetVolumeAttachment(id string) (*baremetal.VolumeAttachment, error) {
	ret := _m.Called(id)

	var r0 *baremetal.VolumeAttachment
	if rf, ok := ret.Get(0).(func(string) *baremetal.VolumeAttachment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVolumeBackup provides a mock function with given fields: id
func (_m *BareMetalClient) GetVolumeBackup(id string) (*baremetal.VolumeBackup, error) {
	ret := _m.Called(id)

	var r0 *baremetal.VolumeBackup
	if rf, ok := ret.Get(0).(func(string) *baremetal.VolumeBackup); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeBackup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HeadObject provides a mock function with given fields: namespace, bucketName, objectName, opts
func (_m *BareMetalClient) HeadObject(namespace baremetal.Namespace, bucketName string, objectName string, opts *baremetal.HeadObjectOptions) (*baremetal.HeadObject, error) {
	ret := _m.Called(namespace, bucketName, objectName, opts)

	var r0 *baremetal.HeadObject
	if rf, ok := ret.Get(0).(func(baremetal.Namespace, string, string, *baremetal.HeadObjectOptions) *baremetal.HeadObject); ok {
		r0 = rf(namespace, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.HeadObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(baremetal.Namespace, string, string, *baremetal.HeadObjectOptions) error); ok {
		r1 = rf(namespace, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstanceAction provides a mock function with given fields: id, action, opts
func (_m *BareMetalClient) InstanceAction(id string, action baremetal.InstanceActions, opts *baremetal.HeaderOptions) (*baremetal.Instance, error) {
	ret := _m.Called(id, action, opts)

	var r0 *baremetal.Instance
	if rf, ok := ret.Get(0).(func(string, baremetal.InstanceActions, *baremetal.HeaderOptions) *baremetal.Instance); ok {
		r0 = rf(id, action, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, baremetal.InstanceActions, *baremetal.HeaderOptions) error); ok {
		r1 = rf(id, action, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchDBSystem provides a mock function with given fields: availabilityDomain, compartmentID, shape, subnetID, sshPublicKeys, cpuCoreCount, opts
func (_m *BareMetalClient) LaunchDBSystem(availabilityDomain string, compartmentID string, shape string, subnetID string, sshPublicKeys []string, cpuCoreCount uint64, opts *baremetal.LaunchDBSystemOptions) (*baremetal.DBSystem, error) {
	ret := _m.Called(availabilityDomain, compartmentID, shape, subnetID, sshPublicKeys, cpuCoreCount, opts)

	var r0 *baremetal.DBSystem
	if rf, ok := ret.Get(0).(func(string, string, string, string, []string, uint64, *baremetal.LaunchDBSystemOptions) *baremetal.DBSystem); ok {
		r0 = rf(availabilityDomain, compartmentID, shape, subnetID, sshPublicKeys, cpuCoreCount, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DBSystem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, []string, uint64, *baremetal.LaunchDBSystemOptions) error); ok {
		r1 = rf(availabilityDomain, compartmentID, shape, subnetID, sshPublicKeys, cpuCoreCount, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LaunchInstance provides a mock function with given fields: availabilityDomain, compartmentID, image, shape, subnetID, opts
func (_m *BareMetalClient) LaunchInstance(availabilityDomain string, compartmentID string, image string, shape string, subnetID string, opts *baremetal.LaunchInstanceOptions) (*baremetal.Instance, error) {
	ret := _m.Called(availabilityDomain, compartmentID, image, shape, subnetID, opts)

	var r0 *baremetal.Instance
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, *baremetal.LaunchInstanceOptions) *baremetal.Instance); ok {
		r0 = rf(availabilityDomain, compartmentID, image, shape, subnetID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, *baremetal.LaunchInstanceOptions) error); ok {
		r1 = rf(availabilityDomain, compartmentID, image, shape, subnetID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAPIKeys provides a mock function with given fields: userID
func (_m *BareMetalClient) ListAPIKeys(userID string) (*baremetal.ListAPIKeyResponses, error) {
	ret := _m.Called(userID)

	var r0 *baremetal.ListAPIKeyResponses
	if rf, ok := ret.Get(0).(func(string) *baremetal.ListAPIKeyResponses); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListAPIKeyResponses)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAvailabilityDomains provides a mock function with given fields: compartmentID
func (_m *BareMetalClient) ListAvailabilityDomains(compartmentID string) (*baremetal.ListAvailabilityDomains, error) {
	ret := _m.Called(compartmentID)

	var r0 *baremetal.ListAvailabilityDomains
	if rf, ok := ret.Get(0).(func(string) *baremetal.ListAvailabilityDomains); ok {
		r0 = rf(compartmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListAvailabilityDomains)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(compartmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuckets provides a mock function with given fields: compartmentID, namespaceName, opts
func (_m *BareMetalClient) ListBuckets(compartmentID string, namespaceName baremetal.Namespace, opts *baremetal.ListBucketsOptions) (*baremetal.ListBuckets, error) {
	ret := _m.Called(compartmentID, namespaceName, opts)

	var r0 *baremetal.ListBuckets
	if rf, ok := ret.Get(0).(func(string, baremetal.Namespace, *baremetal.ListBucketsOptions) *baremetal.ListBuckets); ok {
		r0 = rf(compartmentID, namespaceName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListBuckets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, baremetal.Namespace, *baremetal.ListBucketsOptions) error); ok {
		r1 = rf(compartmentID, namespaceName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCompartments provides a mock function with given fields: opts
func (_m *BareMetalClient) ListCompartments(opts *baremetal.ListOptions) (*baremetal.ListCompartments, error) {
	ret := _m.Called(opts)

	var r0 *baremetal.ListCompartments
	if rf, ok := ret.Get(0).(func(*baremetal.ListOptions) *baremetal.ListCompartments); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListCompartments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*baremetal.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConsoleHistories provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListConsoleHistories(compartmentID string, opts *baremetal.ListConsoleHistoriesOptions) (*baremetal.ListConsoleHistories, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListConsoleHistories
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListConsoleHistoriesOptions) *baremetal.ListConsoleHistories); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListConsoleHistories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListConsoleHistoriesOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCpes provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListCpes(compartmentID string, opts *baremetal.ListOptions) (*baremetal.ListCpes, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListCpes
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListOptions) *baremetal.ListCpes); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListCpes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDBHomes provides a mock function with given fields: compartmentID, dbSystemID, limit, opts
func (_m *BareMetalClient) ListDBHomes(compartmentID string, dbSystemID string, limit uint64, opts *baremetal.PageListOptions) (*baremetal.ListDBHomes, error) {
	ret := _m.Called(compartmentID, dbSystemID, limit, opts)

	var r0 *baremetal.ListDBHomes
	if rf, ok := ret.Get(0).(func(string, string, uint64, *baremetal.PageListOptions) *baremetal.ListDBHomes); ok {
		r0 = rf(compartmentID, dbSystemID, limit, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDBHomes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint64, *baremetal.PageListOptions) error); ok {
		r1 = rf(compartmentID, dbSystemID, limit, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDBNodes provides a mock function with given fields: compartmentID, dbSystemID, limit, opts
func (_m *BareMetalClient) ListDBNodes(compartmentID string, dbSystemID string, limit uint64, opts *baremetal.PageListOptions) (*baremetal.ListDBNodes, error) {
	ret := _m.Called(compartmentID, dbSystemID, limit, opts)

	var r0 *baremetal.ListDBNodes
	if rf, ok := ret.Get(0).(func(string, string, uint64, *baremetal.PageListOptions) *baremetal.ListDBNodes); ok {
		r0 = rf(compartmentID, dbSystemID, limit, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDBNodes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint64, *baremetal.PageListOptions) error); ok {
		r1 = rf(compartmentID, dbSystemID, limit, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDBSystemShapes provides a mock function with given fields: availabilityDomain, compartmentID, limit, opts
func (_m *BareMetalClient) ListDBSystemShapes(availabilityDomain string, compartmentID string, limit uint64, opts *baremetal.PageListOptions) (*baremetal.ListDBSystemShapes, error) {
	ret := _m.Called(availabilityDomain, compartmentID, limit, opts)

	var r0 *baremetal.ListDBSystemShapes
	if rf, ok := ret.Get(0).(func(string, string, uint64, *baremetal.PageListOptions) *baremetal.ListDBSystemShapes); ok {
		r0 = rf(availabilityDomain, compartmentID, limit, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDBSystemShapes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint64, *baremetal.PageListOptions) error); ok {
		r1 = rf(availabilityDomain, compartmentID, limit, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDBSystems provides a mock function with given fields: compartmentID, limit, opts
func (_m *BareMetalClient) ListDBSystems(compartmentID string, limit uint64, opts *baremetal.PageListOptions) (*baremetal.ListDBSystems, error) {
	ret := _m.Called(compartmentID, limit, opts)

	var r0 *baremetal.ListDBSystems
	if rf, ok := ret.Get(0).(func(string, uint64, *baremetal.PageListOptions) *baremetal.ListDBSystems); ok {
		r0 = rf(compartmentID, limit, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDBSystems)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, *baremetal.PageListOptions) error); ok {
		r1 = rf(compartmentID, limit, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDBVersions provides a mock function with given fields: compartmentID, limit, opts
func (_m *BareMetalClient) ListDBVersions(compartmentID string, limit uint64, opts *baremetal.PageListOptions) (*baremetal.ListDBVersions, error) {
	ret := _m.Called(compartmentID, limit, opts)

	var r0 *baremetal.ListDBVersions
	if rf, ok := ret.Get(0).(func(string, uint64, *baremetal.PageListOptions) *baremetal.ListDBVersions); ok {
		r0 = rf(compartmentID, limit, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDBVersions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, *baremetal.PageListOptions) error); ok {
		r1 = rf(compartmentID, limit, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDHCPOptions provides a mock function with given fields: compartmentID, vcnID, opts
func (_m *BareMetalClient) ListDHCPOptions(compartmentID string, vcnID string, opts *baremetal.ListOptions) (*baremetal.ListDHCPOptions, error) {
	ret := _m.Called(compartmentID, vcnID, opts)

	var r0 *baremetal.ListDHCPOptions
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.ListOptions) *baremetal.ListDHCPOptions); ok {
		r0 = rf(compartmentID, vcnID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDHCPOptions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.ListOptions) error); ok {
		r1 = rf(compartmentID, vcnID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabases provides a mock function with given fields: compartmentID, dbHomeID, limit, opts
func (_m *BareMetalClient) ListDatabases(compartmentID string, dbHomeID string, limit uint64, opts *baremetal.PageListOptions) (*baremetal.ListDatabases, error) {
	ret := _m.Called(compartmentID, dbHomeID, limit, opts)

	var r0 *baremetal.ListDatabases
	if rf, ok := ret.Get(0).(func(string, string, uint64, *baremetal.PageListOptions) *baremetal.ListDatabases); ok {
		r0 = rf(compartmentID, dbHomeID, limit, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDatabases)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, uint64, *baremetal.PageListOptions) error); ok {
		r1 = rf(compartmentID, dbHomeID, limit, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDrgAttachments provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListDrgAttachments(compartmentID string, opts *baremetal.ListDrgAttachmentsOptions) (*baremetal.ListDrgAttachments, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListDrgAttachments
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListDrgAttachmentsOptions) *baremetal.ListDrgAttachments); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDrgAttachments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListDrgAttachmentsOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDrgs provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListDrgs(compartmentID string, opts *baremetal.ListOptions) (*baremetal.ListDrgs, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListDrgs
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListOptions) *baremetal.ListDrgs); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListDrgs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: opts
func (_m *BareMetalClient) ListGroups(opts *baremetal.ListOptions) (*baremetal.ListGroups, error) {
	ret := _m.Called(opts)

	var r0 *baremetal.ListGroups
	if rf, ok := ret.Get(0).(func(*baremetal.ListOptions) *baremetal.ListGroups); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListGroups)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*baremetal.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIPSecConnections provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListIPSecConnections(compartmentID string, opts *baremetal.ListIPSecConnsOptions) (*baremetal.ListIPSecConnections, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListIPSecConnections
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListIPSecConnsOptions) *baremetal.ListIPSecConnections); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListIPSecConnections)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListIPSecConnsOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImages provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListImages(compartmentID string, opts *baremetal.ListImagesOptions) (*baremetal.ListImages, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListImages
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListImagesOptions) *baremetal.ListImages); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListImages)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListImagesOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListInstances(compartmentID string, opts *baremetal.ListInstancesOptions) (*baremetal.ListInstances, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListInstances
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListInstancesOptions) *baremetal.ListInstances); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListInstances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListInstancesOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInternetGateways provides a mock function with given fields: compartmentID, vcnID, opts
func (_m *BareMetalClient) ListInternetGateways(compartmentID string, vcnID string, opts *baremetal.ListOptions) (*baremetal.ListInternetGateways, error) {
	ret := _m.Called(compartmentID, vcnID, opts)

	var r0 *baremetal.ListInternetGateways
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.ListOptions) *baremetal.ListInternetGateways); ok {
		r0 = rf(compartmentID, vcnID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListInternetGateways)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.ListOptions) error); ok {
		r1 = rf(compartmentID, vcnID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjects provides a mock function with given fields: namespace, bucket, opts
func (_m *BareMetalClient) ListObjects(namespace baremetal.Namespace, bucket string, opts *baremetal.ListObjectsOptions) (*baremetal.ListObjects, error) {
	ret := _m.Called(namespace, bucket, opts)

	var r0 *baremetal.ListObjects
	if rf, ok := ret.Get(0).(func(baremetal.Namespace, string, *baremetal.ListObjectsOptions) *baremetal.ListObjects); ok {
		r0 = rf(namespace, bucket, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListObjects)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(baremetal.Namespace, string, *baremetal.ListObjectsOptions) error); ok {
		r1 = rf(namespace, bucket, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListPolicies(compartmentID string, opts *baremetal.ListOptions) (*baremetal.ListPolicies, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListPolicies
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListOptions) *baremetal.ListPolicies); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListPolicies)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRouteTables provides a mock function with given fields: compartmentID, vcnID, opts
func (_m *BareMetalClient) ListRouteTables(compartmentID string, vcnID string, opts *baremetal.ListOptions) (*baremetal.ListRouteTables, error) {
	ret := _m.Called(compartmentID, vcnID, opts)

	var r0 *baremetal.ListRouteTables
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.ListOptions) *baremetal.ListRouteTables); ok {
		r0 = rf(compartmentID, vcnID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListRouteTables)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.ListOptions) error); ok {
		r1 = rf(compartmentID, vcnID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityLists provides a mock function with given fields: compartmentID, vcnID, opts
func (_m *BareMetalClient) ListSecurityLists(compartmentID string, vcnID string, opts *baremetal.ListOptions) (*baremetal.ListSecurityLists, error) {
	ret := _m.Called(compartmentID, vcnID, opts)

	var r0 *baremetal.ListSecurityLists
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.ListOptions) *baremetal.ListSecurityLists); ok {
		r0 = rf(compartmentID, vcnID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListSecurityLists)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.ListOptions) error); ok {
		r1 = rf(compartmentID, vcnID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListShapes provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListShapes(compartmentID string, opts *baremetal.ListShapesOptions) (*baremetal.ListShapes, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListShapes
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListShapesOptions) *baremetal.ListShapes); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListShapes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListShapesOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubnets provides a mock function with given fields: compartmentID, vcnID, opts
func (_m *BareMetalClient) ListSubnets(compartmentID string, vcnID string, opts *baremetal.ListOptions) (*baremetal.ListSubnets, error) {
	ret := _m.Called(compartmentID, vcnID, opts)

	var r0 *baremetal.ListSubnets
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.ListOptions) *baremetal.ListSubnets); ok {
		r0 = rf(compartmentID, vcnID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListSubnets)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.ListOptions) error); ok {
		r1 = rf(compartmentID, vcnID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSupportedOperations provides a mock function with given fields:
func (_m *BareMetalClient) ListSupportedOperations() (*baremetal.ListSupportedOperations, error) {
	ret := _m.Called()

	var r0 *baremetal.ListSupportedOperations
	if rf, ok := ret.Get(0).(func() *baremetal.ListSupportedOperations); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListSupportedOperations)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSwiftPasswords provides a mock function with given fields: userID
func (_m *BareMetalClient) ListSwiftPasswords(userID string) (*baremetal.ListSwiftPasswords, error) {
	ret := _m.Called(userID)

	var r0 *baremetal.ListSwiftPasswords
	if rf, ok := ret.Get(0).(func(string) *baremetal.ListSwiftPasswords); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListSwiftPasswords)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserGroupMemberships provides a mock function with given fields: opts
func (_m *BareMetalClient) ListUserGroupMemberships(opts *baremetal.ListMembershipsOptions) (*baremetal.ListUserGroupMemberships, error) {
	ret := _m.Called(opts)

	var r0 *baremetal.ListUserGroupMemberships
	if rf, ok := ret.Get(0).(func(*baremetal.ListMembershipsOptions) *baremetal.ListUserGroupMemberships); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListUserGroupMemberships)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*baremetal.ListMembershipsOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: opts
func (_m *BareMetalClient) ListUsers(opts *baremetal.ListOptions) (*baremetal.ListUsers, error) {
	ret := _m.Called(opts)

	var r0 *baremetal.ListUsers
	if rf, ok := ret.Get(0).(func(*baremetal.ListOptions) *baremetal.ListUsers); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListUsers)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*baremetal.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVirtualNetworks provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListVirtualNetworks(compartmentID string, opts *baremetal.ListOptions) (*baremetal.ListVirtualNetworks, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListVirtualNetworks
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListOptions) *baremetal.ListVirtualNetworks); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVirtualNetworks)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVnicAttachments provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListVnicAttachments(compartmentID string, opts *baremetal.ListVnicAttachmentsOptions) (*baremetal.ListVnicAttachments, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListVnicAttachments
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListVnicAttachmentsOptions) *baremetal.ListVnicAttachments); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVnicAttachments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListVnicAttachmentsOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumeAttachments provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListVolumeAttachments(compartmentID string, opts *baremetal.ListVolumeAttachmentsOptions) (*baremetal.ListVolumeAttachments, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListVolumeAttachments
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListVolumeAttachmentsOptions) *baremetal.ListVolumeAttachments); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVolumeAttachments)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListVolumeAttachmentsOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumeBackups provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListVolumeBackups(compartmentID string, opts *baremetal.ListBackupsOptions) (*baremetal.ListVolumeBackups, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListVolumeBackups
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListBackupsOptions) *baremetal.ListVolumeBackups); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVolumeBackups)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListBackupsOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumes provides a mock function with given fields: compartmentID, opts
func (_m *BareMetalClient) ListVolumes(compartmentID string, opts *baremetal.ListVolumesOptions) (*baremetal.ListVolumes, error) {
	ret := _m.Called(compartmentID, opts)

	var r0 *baremetal.ListVolumes
	if rf, ok := ret.Get(0).(func(string, *baremetal.ListVolumesOptions) *baremetal.ListVolumes); ok {
		r0 = rf(compartmentID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ListVolumes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ListVolumesOptions) error); ok {
		r1 = rf(compartmentID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutObject provides a mock function with given fields: namespace, bucketName, objectName, content, opts
func (_m *BareMetalClient) PutObject(namespace baremetal.Namespace, bucketName string, objectName string, content []byte, opts *baremetal.PutObjectOptions) (*baremetal.Object, error) {
	ret := _m.Called(namespace, bucketName, objectName, content, opts)

	var r0 *baremetal.Object
	if rf, ok := ret.Get(0).(func(baremetal.Namespace, string, string, []byte, *baremetal.PutObjectOptions) *baremetal.Object); ok {
		r0 = rf(namespace, bucketName, objectName, content, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(baremetal.Namespace, string, string, []byte, *baremetal.PutObjectOptions) error); ok {
		r1 = rf(namespace, bucketName, objectName, content, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowConsoleHistoryData provides a mock function with given fields: instanceConsoleHistoryID, opts
func (_m *BareMetalClient) ShowConsoleHistoryData(instanceConsoleHistoryID string, opts *baremetal.ConsoleHistoryDataOptions) (*baremetal.ConsoleHistoryData, error) {
	ret := _m.Called(instanceConsoleHistoryID, opts)

	var r0 *baremetal.ConsoleHistoryData
	if rf, ok := ret.Get(0).(func(string, *baremetal.ConsoleHistoryDataOptions) *baremetal.ConsoleHistoryData); ok {
		r0 = rf(instanceConsoleHistoryID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.ConsoleHistoryData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.ConsoleHistoryDataOptions) error); ok {
		r1 = rf(instanceConsoleHistoryID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateDBSystem provides a mock function with given fields: id, opts
func (_m *BareMetalClient) TerminateDBSystem(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TerminateInstance provides a mock function with given fields: id, opts
func (_m *BareMetalClient) TerminateInstance(id string, opts *baremetal.IfMatchOptions) error {
	ret := _m.Called(id, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchOptions) error); ok {
		r0 = rf(id, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBucket provides a mock function with given fields: compartmentID, name, namespaceName, opts
func (_m *BareMetalClient) UpdateBucket(compartmentID string, name string, namespaceName baremetal.Namespace, opts *baremetal.UpdateBucketOptions) (*baremetal.Bucket, error) {
	ret := _m.Called(compartmentID, name, namespaceName, opts)

	var r0 *baremetal.Bucket
	if rf, ok := ret.Get(0).(func(string, string, baremetal.Namespace, *baremetal.UpdateBucketOptions) *baremetal.Bucket); ok {
		r0 = rf(compartmentID, name, namespaceName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Bucket)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, baremetal.Namespace, *baremetal.UpdateBucketOptions) error); ok {
		r1 = rf(compartmentID, name, namespaceName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCompartment provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateCompartment(id string, opts *baremetal.UpdateIdentityOptions) (*baremetal.Compartment, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Compartment
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateIdentityOptions) *baremetal.Compartment); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Compartment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateIdentityOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCpe provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateCpe(id string, opts *baremetal.IfMatchDisplayNameOptions) (*baremetal.Cpe, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Cpe
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchDisplayNameOptions) *baremetal.Cpe); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Cpe)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.IfMatchDisplayNameOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDHCPOptions provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateDHCPOptions(id string, opts *baremetal.UpdateDHCPDNSOptions) (*baremetal.DHCPOptions, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.DHCPOptions
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateDHCPDNSOptions) *baremetal.DHCPOptions); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DHCPOptions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateDHCPDNSOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDrg provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateDrg(id string, opts *baremetal.IfMatchDisplayNameOptions) (*baremetal.Drg, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Drg
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchDisplayNameOptions) *baremetal.Drg); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Drg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.IfMatchDisplayNameOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDrgAttachment provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateDrgAttachment(id string, opts *baremetal.IfMatchDisplayNameOptions) (*baremetal.DrgAttachment, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.DrgAttachment
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchDisplayNameOptions) *baremetal.DrgAttachment); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.DrgAttachment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.IfMatchDisplayNameOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateGroup(id string, opts *baremetal.UpdateIdentityOptions) (*baremetal.Group, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Group
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateIdentityOptions) *baremetal.Group); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateIdentityOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIPSecConnection provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateIPSecConnection(id string, opts *baremetal.IfMatchDisplayNameOptions) (*baremetal.IPSecConnection, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.IPSecConnection
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchDisplayNameOptions) *baremetal.IPSecConnection); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.IPSecConnection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.IfMatchDisplayNameOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImage provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateImage(id string, opts *baremetal.UpdateOptions) (*baremetal.Image, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Image
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateOptions) *baremetal.Image); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstance provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateInstance(id string, opts *baremetal.UpdateOptions) (*baremetal.Instance, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Instance
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateOptions) *baremetal.Instance); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInternetGateway provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateInternetGateway(id string, opts *baremetal.UpdateGatewayOptions) (*baremetal.InternetGateway, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.InternetGateway
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateGatewayOptions) *baremetal.InternetGateway); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.InternetGateway)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateGatewayOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePolicy provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdatePolicy(id string, opts *baremetal.UpdatePolicyOptions) (*baremetal.Policy, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Policy
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdatePolicyOptions) *baremetal.Policy); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdatePolicyOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRouteTable provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateRouteTable(id string, opts *baremetal.UpdateRouteTableOptions) (*baremetal.RouteTable, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.RouteTable
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateRouteTableOptions) *baremetal.RouteTable); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.RouteTable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateRouteTableOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityList provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateSecurityList(id string, opts *baremetal.UpdateSecurityListOptions) (*baremetal.SecurityList, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.SecurityList
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateSecurityListOptions) *baremetal.SecurityList); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.SecurityList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateSecurityListOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubnet provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateSubnet(id string, opts *baremetal.IfMatchDisplayNameOptions) (*baremetal.Subnet, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Subnet
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchDisplayNameOptions) *baremetal.Subnet); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Subnet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.IfMatchDisplayNameOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSwiftPassword provides a mock function with given fields: id, userID, opts
func (_m *BareMetalClient) UpdateSwiftPassword(id string, userID string, opts *baremetal.UpdateIdentityOptions) (*baremetal.SwiftPassword, error) {
	ret := _m.Called(id, userID, opts)

	var r0 *baremetal.SwiftPassword
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.UpdateIdentityOptions) *baremetal.SwiftPassword); ok {
		r0 = rf(id, userID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.SwiftPassword)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.UpdateIdentityOptions) error); ok {
		r1 = rf(id, userID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateUser(id string, opts *baremetal.UpdateIdentityOptions) (*baremetal.User, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.User
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateIdentityOptions) *baremetal.User); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateIdentityOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVirtualNetwork provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateVirtualNetwork(id string, opts *baremetal.IfMatchDisplayNameOptions) (*baremetal.VirtualNetwork, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.VirtualNetwork
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchDisplayNameOptions) *baremetal.VirtualNetwork); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VirtualNetwork)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.IfMatchDisplayNameOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVolume provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateVolume(id string, opts *baremetal.UpdateOptions) (*baremetal.Volume, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.Volume
	if rf, ok := ret.Get(0).(func(string, *baremetal.UpdateOptions) *baremetal.Volume); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.UpdateOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVolumeBackup provides a mock function with given fields: id, opts
func (_m *BareMetalClient) UpdateVolumeBackup(id string, opts *baremetal.IfMatchDisplayNameOptions) (*baremetal.VolumeBackup, error) {
	ret := _m.Called(id, opts)

	var r0 *baremetal.VolumeBackup
	if rf, ok := ret.Get(0).(func(string, *baremetal.IfMatchDisplayNameOptions) *baremetal.VolumeBackup); ok {
		r0 = rf(id, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.VolumeBackup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *baremetal.IfMatchDisplayNameOptions) error); ok {
		r1 = rf(id, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadAPIKey provides a mock function with given fields: userID, key, opts
func (_m *BareMetalClient) UploadAPIKey(userID string, key string, opts *baremetal.RetryTokenOptions) (*baremetal.APIKey, error) {
	ret := _m.Called(userID, key, opts)

	var r0 *baremetal.APIKey
	if rf, ok := ret.Get(0).(func(string, string, *baremetal.RetryTokenOptions) *baremetal.APIKey); ok {
		r0 = rf(userID, key, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baremetal.APIKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *baremetal.RetryTokenOptions) error); ok {
		r1 = rf(userID, key, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
